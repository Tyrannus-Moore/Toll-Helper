// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `TollAssist.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace ASSISTICE
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CarTable : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string id;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string color;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string number;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string brand;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string type;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int axleNum;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int maxPassenger;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public double maxLoad;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public double weight;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string creator;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string company;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int monLevel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string esType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string esRemark;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string dtime;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public CarTable()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public CarTable(string id, string color, string number, string brand, string type, int axleNum, int maxPassenger, double maxLoad, double weight, string creator, string company, int monLevel, string esType, string esRemark, string dtime)
        {
            this.id = id;
            this.color = color;
            this.number = number;
            this.brand = brand;
            this.type = type;
            this.axleNum = axleNum;
            this.maxPassenger = maxPassenger;
            this.maxLoad = maxLoad;
            this.weight = weight;
            this.creator = creator;
            this.company = company;
            this.monLevel = monLevel;
            this.esType = esType;
            this.esRemark = esRemark;
            this.dtime = dtime;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(id != null)
            {
                h__ = 5 * h__ + id.GetHashCode();
            }
            if(color != null)
            {
                h__ = 5 * h__ + color.GetHashCode();
            }
            if(number != null)
            {
                h__ = 5 * h__ + number.GetHashCode();
            }
            if(brand != null)
            {
                h__ = 5 * h__ + brand.GetHashCode();
            }
            if(type != null)
            {
                h__ = 5 * h__ + type.GetHashCode();
            }
            h__ = 5 * h__ + axleNum.GetHashCode();
            h__ = 5 * h__ + maxPassenger.GetHashCode();
            h__ = 5 * h__ + maxLoad.GetHashCode();
            h__ = 5 * h__ + weight.GetHashCode();
            if(creator != null)
            {
                h__ = 5 * h__ + creator.GetHashCode();
            }
            if(company != null)
            {
                h__ = 5 * h__ + company.GetHashCode();
            }
            h__ = 5 * h__ + monLevel.GetHashCode();
            if(esType != null)
            {
                h__ = 5 * h__ + esType.GetHashCode();
            }
            if(esRemark != null)
            {
                h__ = 5 * h__ + esRemark.GetHashCode();
            }
            if(dtime != null)
            {
                h__ = 5 * h__ + dtime.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            CarTable o__ = (CarTable)other__;
            if(id == null)
            {
                if(o__.id != null)
                {
                    return false;
                }
            }
            else
            {
                if(!id.Equals(o__.id))
                {
                    return false;
                }
            }
            if(color == null)
            {
                if(o__.color != null)
                {
                    return false;
                }
            }
            else
            {
                if(!color.Equals(o__.color))
                {
                    return false;
                }
            }
            if(number == null)
            {
                if(o__.number != null)
                {
                    return false;
                }
            }
            else
            {
                if(!number.Equals(o__.number))
                {
                    return false;
                }
            }
            if(brand == null)
            {
                if(o__.brand != null)
                {
                    return false;
                }
            }
            else
            {
                if(!brand.Equals(o__.brand))
                {
                    return false;
                }
            }
            if(type == null)
            {
                if(o__.type != null)
                {
                    return false;
                }
            }
            else
            {
                if(!type.Equals(o__.type))
                {
                    return false;
                }
            }
            if(!axleNum.Equals(o__.axleNum))
            {
                return false;
            }
            if(!maxPassenger.Equals(o__.maxPassenger))
            {
                return false;
            }
            if(!maxLoad.Equals(o__.maxLoad))
            {
                return false;
            }
            if(!weight.Equals(o__.weight))
            {
                return false;
            }
            if(creator == null)
            {
                if(o__.creator != null)
                {
                    return false;
                }
            }
            else
            {
                if(!creator.Equals(o__.creator))
                {
                    return false;
                }
            }
            if(company == null)
            {
                if(o__.company != null)
                {
                    return false;
                }
            }
            else
            {
                if(!company.Equals(o__.company))
                {
                    return false;
                }
            }
            if(!monLevel.Equals(o__.monLevel))
            {
                return false;
            }
            if(esType == null)
            {
                if(o__.esType != null)
                {
                    return false;
                }
            }
            else
            {
                if(!esType.Equals(o__.esType))
                {
                    return false;
                }
            }
            if(esRemark == null)
            {
                if(o__.esRemark != null)
                {
                    return false;
                }
            }
            else
            {
                if(!esRemark.Equals(o__.esRemark))
                {
                    return false;
                }
            }
            if(dtime == null)
            {
                if(o__.dtime != null)
                {
                    return false;
                }
            }
            else
            {
                if(!dtime.Equals(o__.dtime))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(CarTable lhs__, CarTable rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(CarTable lhs__, CarTable rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(id);
            os__.writeString(color);
            os__.writeString(number);
            os__.writeString(brand);
            os__.writeString(type);
            os__.writeInt(axleNum);
            os__.writeInt(maxPassenger);
            os__.writeDouble(maxLoad);
            os__.writeDouble(weight);
            os__.writeString(creator);
            os__.writeString(company);
            os__.writeInt(monLevel);
            os__.writeString(esType);
            os__.writeString(esRemark);
            os__.writeString(dtime);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            id = is__.readString();
            color = is__.readString();
            number = is__.readString();
            brand = is__.readString();
            type = is__.readString();
            axleNum = is__.readInt();
            maxPassenger = is__.readInt();
            maxLoad = is__.readDouble();
            weight = is__.readDouble();
            creator = is__.readString();
            company = is__.readString();
            monLevel = is__.readInt();
            esType = is__.readString();
            esRemark = is__.readString();
            dtime = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class TollNode : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string companycode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string plazcode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string lanname;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int lannum;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public TollNode()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public TollNode(string companycode, string plazcode, string lanname, int lannum)
        {
            this.companycode = companycode;
            this.plazcode = plazcode;
            this.lanname = lanname;
            this.lannum = lannum;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(companycode != null)
            {
                h__ = 5 * h__ + companycode.GetHashCode();
            }
            if(plazcode != null)
            {
                h__ = 5 * h__ + plazcode.GetHashCode();
            }
            if(lanname != null)
            {
                h__ = 5 * h__ + lanname.GetHashCode();
            }
            h__ = 5 * h__ + lannum.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            TollNode o__ = (TollNode)other__;
            if(companycode == null)
            {
                if(o__.companycode != null)
                {
                    return false;
                }
            }
            else
            {
                if(!companycode.Equals(o__.companycode))
                {
                    return false;
                }
            }
            if(plazcode == null)
            {
                if(o__.plazcode != null)
                {
                    return false;
                }
            }
            else
            {
                if(!plazcode.Equals(o__.plazcode))
                {
                    return false;
                }
            }
            if(lanname == null)
            {
                if(o__.lanname != null)
                {
                    return false;
                }
            }
            else
            {
                if(!lanname.Equals(o__.lanname))
                {
                    return false;
                }
            }
            if(!lannum.Equals(o__.lannum))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(TollNode lhs__, TollNode rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(TollNode lhs__, TollNode rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(companycode);
            os__.writeString(plazcode);
            os__.writeString(lanname);
            os__.writeInt(lannum);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            companycode = is__.readString();
            plazcode = is__.readString();
            lanname = is__.readString();
            lannum = is__.readInt();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Station : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string bm;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string lb;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string mc;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string lgs;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Station()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public Station(string bm, string lb, string mc, string lgs)
        {
            this.bm = bm;
            this.lb = lb;
            this.mc = mc;
            this.lgs = lgs;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(bm != null)
            {
                h__ = 5 * h__ + bm.GetHashCode();
            }
            if(lb != null)
            {
                h__ = 5 * h__ + lb.GetHashCode();
            }
            if(mc != null)
            {
                h__ = 5 * h__ + mc.GetHashCode();
            }
            if(lgs != null)
            {
                h__ = 5 * h__ + lgs.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            Station o__ = (Station)other__;
            if(bm == null)
            {
                if(o__.bm != null)
                {
                    return false;
                }
            }
            else
            {
                if(!bm.Equals(o__.bm))
                {
                    return false;
                }
            }
            if(lb == null)
            {
                if(o__.lb != null)
                {
                    return false;
                }
            }
            else
            {
                if(!lb.Equals(o__.lb))
                {
                    return false;
                }
            }
            if(mc == null)
            {
                if(o__.mc != null)
                {
                    return false;
                }
            }
            else
            {
                if(!mc.Equals(o__.mc))
                {
                    return false;
                }
            }
            if(lgs == null)
            {
                if(o__.lgs != null)
                {
                    return false;
                }
            }
            else
            {
                if(!lgs.Equals(o__.lgs))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(Station lhs__, Station rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(Station lhs__, Station rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(bm);
            os__.writeString(lb);
            os__.writeString(mc);
            os__.writeString(lgs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            bm = is__.readString();
            lb = is__.readString();
            mc = is__.readString();
            lgs = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class BatchQueryParams : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string platte;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ASSISTICE.TollNode node;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public BatchQueryParams()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public BatchQueryParams(string platte, ASSISTICE.TollNode node)
        {
            this.platte = platte;
            this.node = node;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(platte != null)
            {
                h__ = 5 * h__ + platte.GetHashCode();
            }
            if(node != null)
            {
                h__ = 5 * h__ + node.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            BatchQueryParams o__ = (BatchQueryParams)other__;
            if(platte == null)
            {
                if(o__.platte != null)
                {
                    return false;
                }
            }
            else
            {
                if(!platte.Equals(o__.platte))
                {
                    return false;
                }
            }
            if(node == null)
            {
                if(o__.node != null)
                {
                    return false;
                }
            }
            else
            {
                if(!node.Equals(o__.node))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(BatchQueryParams lhs__, BatchQueryParams rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(BatchQueryParams lhs__, BatchQueryParams rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(platte);
            if(node == null)
            {
                ASSISTICE.TollNode tmp__ = new ASSISTICE.TollNode();
                tmp__.write__(os__);
            }
            else
            {
                node.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            platte = is__.readString();
            if(node == null)
            {
                node = new ASSISTICE.TollNode();
            }
            node.read__(is__);
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CustomRecord : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string id;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string number;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string color;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string brand;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string type;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string flag;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int monLevel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string dtime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string @operator;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public double customamount;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public ASSISTICE.TollNode node;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public CustomRecord()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public CustomRecord(string id, string number, string color, string brand, string type, string flag, int monLevel, string dtime, string @operator, double customamount, ASSISTICE.TollNode node)
        {
            this.id = id;
            this.number = number;
            this.color = color;
            this.brand = brand;
            this.type = type;
            this.flag = flag;
            this.monLevel = monLevel;
            this.dtime = dtime;
            this.@operator = @operator;
            this.customamount = customamount;
            this.node = node;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(id != null)
            {
                h__ = 5 * h__ + id.GetHashCode();
            }
            if(number != null)
            {
                h__ = 5 * h__ + number.GetHashCode();
            }
            if(color != null)
            {
                h__ = 5 * h__ + color.GetHashCode();
            }
            if(brand != null)
            {
                h__ = 5 * h__ + brand.GetHashCode();
            }
            if(type != null)
            {
                h__ = 5 * h__ + type.GetHashCode();
            }
            if(flag != null)
            {
                h__ = 5 * h__ + flag.GetHashCode();
            }
            h__ = 5 * h__ + monLevel.GetHashCode();
            if(dtime != null)
            {
                h__ = 5 * h__ + dtime.GetHashCode();
            }
            if(@operator != null)
            {
                h__ = 5 * h__ + @operator.GetHashCode();
            }
            h__ = 5 * h__ + customamount.GetHashCode();
            if(node != null)
            {
                h__ = 5 * h__ + node.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            CustomRecord o__ = (CustomRecord)other__;
            if(id == null)
            {
                if(o__.id != null)
                {
                    return false;
                }
            }
            else
            {
                if(!id.Equals(o__.id))
                {
                    return false;
                }
            }
            if(number == null)
            {
                if(o__.number != null)
                {
                    return false;
                }
            }
            else
            {
                if(!number.Equals(o__.number))
                {
                    return false;
                }
            }
            if(color == null)
            {
                if(o__.color != null)
                {
                    return false;
                }
            }
            else
            {
                if(!color.Equals(o__.color))
                {
                    return false;
                }
            }
            if(brand == null)
            {
                if(o__.brand != null)
                {
                    return false;
                }
            }
            else
            {
                if(!brand.Equals(o__.brand))
                {
                    return false;
                }
            }
            if(type == null)
            {
                if(o__.type != null)
                {
                    return false;
                }
            }
            else
            {
                if(!type.Equals(o__.type))
                {
                    return false;
                }
            }
            if(flag == null)
            {
                if(o__.flag != null)
                {
                    return false;
                }
            }
            else
            {
                if(!flag.Equals(o__.flag))
                {
                    return false;
                }
            }
            if(!monLevel.Equals(o__.monLevel))
            {
                return false;
            }
            if(dtime == null)
            {
                if(o__.dtime != null)
                {
                    return false;
                }
            }
            else
            {
                if(!dtime.Equals(o__.dtime))
                {
                    return false;
                }
            }
            if(@operator == null)
            {
                if(o__.@operator != null)
                {
                    return false;
                }
            }
            else
            {
                if(!@operator.Equals(o__.@operator))
                {
                    return false;
                }
            }
            if(!customamount.Equals(o__.customamount))
            {
                return false;
            }
            if(node == null)
            {
                if(o__.node != null)
                {
                    return false;
                }
            }
            else
            {
                if(!node.Equals(o__.node))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(CustomRecord lhs__, CustomRecord rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(CustomRecord lhs__, CustomRecord rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(id);
            os__.writeString(number);
            os__.writeString(color);
            os__.writeString(brand);
            os__.writeString(type);
            os__.writeString(flag);
            os__.writeInt(monLevel);
            os__.writeString(dtime);
            os__.writeString(@operator);
            os__.writeDouble(customamount);
            if(node == null)
            {
                ASSISTICE.TollNode tmp__ = new ASSISTICE.TollNode();
                tmp__.write__(os__);
            }
            else
            {
                node.write__(os__);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            id = is__.readString();
            number = is__.readString();
            color = is__.readString();
            brand = is__.readString();
            type = is__.readString();
            flag = is__.readString();
            monLevel = is__.readInt();
            dtime = is__.readString();
            @operator = is__.readString();
            customamount = is__.readDouble();
            if(node == null)
            {
                node = new ASSISTICE.TollNode();
            }
            node.read__(is__);
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class CarRecord : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string number;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string color;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int monLevel;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string type;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string flag;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string companycode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string plazcode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string lanname;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int lannum;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string dtime;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public CarRecord()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public CarRecord(string number, string color, int monLevel, string type, string flag, string companycode, string plazcode, string lanname, int lannum, string dtime)
        {
            this.number = number;
            this.color = color;
            this.monLevel = monLevel;
            this.type = type;
            this.flag = flag;
            this.companycode = companycode;
            this.plazcode = plazcode;
            this.lanname = lanname;
            this.lannum = lannum;
            this.dtime = dtime;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if(number != null)
            {
                h__ = 5 * h__ + number.GetHashCode();
            }
            if(color != null)
            {
                h__ = 5 * h__ + color.GetHashCode();
            }
            h__ = 5 * h__ + monLevel.GetHashCode();
            if(type != null)
            {
                h__ = 5 * h__ + type.GetHashCode();
            }
            if(flag != null)
            {
                h__ = 5 * h__ + flag.GetHashCode();
            }
            if(companycode != null)
            {
                h__ = 5 * h__ + companycode.GetHashCode();
            }
            if(plazcode != null)
            {
                h__ = 5 * h__ + plazcode.GetHashCode();
            }
            if(lanname != null)
            {
                h__ = 5 * h__ + lanname.GetHashCode();
            }
            h__ = 5 * h__ + lannum.GetHashCode();
            if(dtime != null)
            {
                h__ = 5 * h__ + dtime.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            CarRecord o__ = (CarRecord)other__;
            if(number == null)
            {
                if(o__.number != null)
                {
                    return false;
                }
            }
            else
            {
                if(!number.Equals(o__.number))
                {
                    return false;
                }
            }
            if(color == null)
            {
                if(o__.color != null)
                {
                    return false;
                }
            }
            else
            {
                if(!color.Equals(o__.color))
                {
                    return false;
                }
            }
            if(!monLevel.Equals(o__.monLevel))
            {
                return false;
            }
            if(type == null)
            {
                if(o__.type != null)
                {
                    return false;
                }
            }
            else
            {
                if(!type.Equals(o__.type))
                {
                    return false;
                }
            }
            if(flag == null)
            {
                if(o__.flag != null)
                {
                    return false;
                }
            }
            else
            {
                if(!flag.Equals(o__.flag))
                {
                    return false;
                }
            }
            if(companycode == null)
            {
                if(o__.companycode != null)
                {
                    return false;
                }
            }
            else
            {
                if(!companycode.Equals(o__.companycode))
                {
                    return false;
                }
            }
            if(plazcode == null)
            {
                if(o__.plazcode != null)
                {
                    return false;
                }
            }
            else
            {
                if(!plazcode.Equals(o__.plazcode))
                {
                    return false;
                }
            }
            if(lanname == null)
            {
                if(o__.lanname != null)
                {
                    return false;
                }
            }
            else
            {
                if(!lanname.Equals(o__.lanname))
                {
                    return false;
                }
            }
            if(!lannum.Equals(o__.lannum))
            {
                return false;
            }
            if(dtime == null)
            {
                if(o__.dtime != null)
                {
                    return false;
                }
            }
            else
            {
                if(!dtime.Equals(o__.dtime))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(CarRecord lhs__, CarRecord rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(CarRecord lhs__, CarRecord rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(number);
            os__.writeString(color);
            os__.writeInt(monLevel);
            os__.writeString(type);
            os__.writeString(flag);
            os__.writeString(companycode);
            os__.writeString(plazcode);
            os__.writeString(lanname);
            os__.writeInt(lannum);
            os__.writeString(dtime);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            number = is__.readString();
            color = is__.readString();
            monLevel = is__.readInt();
            type = is__.readString();
            flag = is__.readString();
            companycode = is__.readString();
            plazcode = is__.readString();
            lanname = is__.readString();
            lannum = is__.readInt();
            dtime = is__.readString();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ICarQuery : Ice.Object, ICarQueryOperations_, ICarQueryOperationsNC_
    {
    }
}

namespace ASSISTICE
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ICarQuery_QueryCarRecord(bool ret__, ASSISTICE.CarTable[] records, string error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ICarQuery_BatchQuery(bool ret__, string error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ICarQuery_BatchUpload(bool ret__, string error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ICarQuery_QueryStations(bool ret__, ASSISTICE.Station[] lst, string error);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_ICarQuery_UploadTollNode(bool ret__, string error);
}

namespace ASSISTICE
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ICarQueryPrx : Ice.ObjectPrx
    {
        bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error);
        bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node);
        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_QueryCarRecord(out ASSISTICE.CarTable[] records, out string error, Ice.AsyncResult r__);

        bool QueryCarRecord_async(ASSISTICE.AMI_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node);
        bool QueryCarRecord_async(ASSISTICE.AMI_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__);

        bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error);
        bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchQuery> begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys);
        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchQuery> begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_BatchQuery(out string error, Ice.AsyncResult r__);

        bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error);
        bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchUpload> begin_BatchUpload(ASSISTICE.CustomRecord[] records);
        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchUpload> begin_BatchUpload(ASSISTICE.CustomRecord[] records, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_BatchUpload(ASSISTICE.CustomRecord[] records, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_BatchUpload(ASSISTICE.CustomRecord[] records, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_BatchUpload(out string error, Ice.AsyncResult r__);

        bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error);
        bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryStations> begin_QueryStations(int from, int count);
        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryStations> begin_QueryStations(int from, int count, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_QueryStations(int from, int count, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_QueryStations(int from, int count, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_QueryStations(out ASSISTICE.Station[] lst, out string error, Ice.AsyncResult r__);

        bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error);
        bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_UploadTollNode> begin_UploadTollNode(string flag, ASSISTICE.TollNode node);
        Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_UploadTollNode> begin_UploadTollNode(string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_UploadTollNode(string flag, ASSISTICE.TollNode node, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_UploadTollNode(string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_UploadTollNode(out string error, Ice.AsyncResult r__);
    }
}

namespace ASSISTICE
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ICarQueryOperations_
    {
        void QueryCarRecord_async(ASSISTICE.AMD_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node, Ice.Current current__);

        bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, Ice.Current current__);

        bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, Ice.Current current__);

        bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, Ice.Current current__);

        bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ICarQueryOperationsNC_
    {
        void QueryCarRecord_async(ASSISTICE.AMD_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node);

        bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error);

        bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error);

        bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error);

        bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error);
    }
}

namespace ASSISTICE
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class StationsHelper
    {
        public static void write(IceInternal.BasicStream os__, ASSISTICE.Station[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new ASSISTICE.Station() : v__[ix__]).write__(os__);
                }
            }
        }

        public static ASSISTICE.Station[] read(IceInternal.BasicStream is__)
        {
            ASSISTICE.Station[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                v__ = new ASSISTICE.Station[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new ASSISTICE.Station();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class BatchQuerysHelper
    {
        public static void write(IceInternal.BasicStream os__, ASSISTICE.BatchQueryParams[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new ASSISTICE.BatchQueryParams() : v__[ix__]).write__(os__);
                }
            }
        }

        public static ASSISTICE.BatchQueryParams[] read(IceInternal.BasicStream is__)
        {
            ASSISTICE.BatchQueryParams[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(8);
                v__ = new ASSISTICE.BatchQueryParams[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new ASSISTICE.BatchQueryParams();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class CustomRecordsHelper
    {
        public static void write(IceInternal.BasicStream os__, ASSISTICE.CustomRecord[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new ASSISTICE.CustomRecord() : v__[ix__]).write__(os__);
                }
            }
        }

        public static ASSISTICE.CustomRecord[] read(IceInternal.BasicStream is__)
        {
            ASSISTICE.CustomRecord[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(27);
                v__ = new ASSISTICE.CustomRecord[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new ASSISTICE.CustomRecord();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class CarTablesHelper
    {
        public static void write(IceInternal.BasicStream os__, ASSISTICE.CarTable[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new ASSISTICE.CarTable() : v__[ix__]).write__(os__);
                }
            }
        }

        public static ASSISTICE.CarTable[] read(IceInternal.BasicStream is__)
        {
            ASSISTICE.CarTable[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(38);
                v__ = new ASSISTICE.CarTable[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new ASSISTICE.CarTable();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ICarQueryPrxHelper : Ice.ObjectPrxHelperBase, ICarQueryPrx
    {
        #region Synchronous operations

        public bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error)
        {
            return BatchQuery(querys, out error, null, false);
        }

        public bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return BatchQuery(querys, out error, context__, true);
        }

        private bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("BatchQuery");
                    delBase__ = getDelegate__(false);
                    ICarQueryDel_ del__ = (ICarQueryDel_)delBase__;
                    return del__.BatchQuery(querys, out error, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error)
        {
            return BatchUpload(records, out error, null, false);
        }

        public bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return BatchUpload(records, out error, context__, true);
        }

        private bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("BatchUpload");
                    delBase__ = getDelegate__(false);
                    ICarQueryDel_ del__ = (ICarQueryDel_)delBase__;
                    return del__.BatchUpload(records, out error, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error)
        {
            return QueryCarRecord(platte, flag, node, out records, out error, null, false);
        }

        public bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return QueryCarRecord(platte, flag, node, out records, out error, context__, true);
        }

        private bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("QueryCarRecord");
                    delBase__ = getDelegate__(false);
                    ICarQueryDel_ del__ = (ICarQueryDel_)delBase__;
                    return del__.QueryCarRecord(platte, flag, node, out records, out error, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error)
        {
            return QueryStations(from, count, out lst, out error, null, false);
        }

        public bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return QueryStations(from, count, out lst, out error, context__, true);
        }

        private bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("QueryStations");
                    delBase__ = getDelegate__(false);
                    ICarQueryDel_ del__ = (ICarQueryDel_)delBase__;
                    return del__.QueryStations(from, count, out lst, out error, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error)
        {
            return UploadTollNode(flag, node, out error, null, false);
        }

        public bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return UploadTollNode(flag, node, out error, context__, true);
        }

        private bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("UploadTollNode");
                    delBase__ = getDelegate__(false);
                    ICarQueryDel_ del__ = (ICarQueryDel_)delBase__;
                    return del__.UploadTollNode(flag, node, out error, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchQuery> begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys)
        {
            return begin_BatchQuery(querys, null, false, null, null);
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchQuery> begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_BatchQuery(querys, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_BatchQuery(querys, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_BatchQuery(querys, ctx__, true, cb__, cookie__);
        }

        private const string __BatchQuery_name = "BatchQuery";

        public bool end_BatchQuery(out string error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __BatchQuery_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            error = is__.readString();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchQuery> begin_BatchQuery(ASSISTICE.BatchQueryParams[] querys, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__BatchQuery_name);
            IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_BatchQuery> result__ =  new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_BatchQuery>(this, __BatchQuery_name, BatchQuery_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__BatchQuery_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(querys == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(querys.Length);
                    for(int ix__ = 0; ix__ < querys.Length; ++ix__)
                    {
                        (querys[ix__] == null ? new ASSISTICE.BatchQueryParams() : querys[ix__]).write__(os__);
                    }
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void BatchQuery_completed__(Ice.AsyncResult r__, ASSISTICE.Callback_ICarQuery_BatchQuery cb__, Ice.ExceptionCallback excb__)
        {
            string error;
            bool ret__;
            try
            {
                ret__ = end_BatchQuery(out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, error);
            }
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchUpload> begin_BatchUpload(ASSISTICE.CustomRecord[] records)
        {
            return begin_BatchUpload(records, null, false, null, null);
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchUpload> begin_BatchUpload(ASSISTICE.CustomRecord[] records, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_BatchUpload(records, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_BatchUpload(ASSISTICE.CustomRecord[] records, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_BatchUpload(records, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_BatchUpload(ASSISTICE.CustomRecord[] records, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_BatchUpload(records, ctx__, true, cb__, cookie__);
        }

        private const string __BatchUpload_name = "BatchUpload";

        public bool end_BatchUpload(out string error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __BatchUpload_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            error = is__.readString();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_BatchUpload> begin_BatchUpload(ASSISTICE.CustomRecord[] records, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__BatchUpload_name);
            IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_BatchUpload> result__ =  new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_BatchUpload>(this, __BatchUpload_name, BatchUpload_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__BatchUpload_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(records == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(records.Length);
                    for(int ix__ = 0; ix__ < records.Length; ++ix__)
                    {
                        (records[ix__] == null ? new ASSISTICE.CustomRecord() : records[ix__]).write__(os__);
                    }
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void BatchUpload_completed__(Ice.AsyncResult r__, ASSISTICE.Callback_ICarQuery_BatchUpload cb__, Ice.ExceptionCallback excb__)
        {
            string error;
            bool ret__;
            try
            {
                ret__ = end_BatchUpload(out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, error);
            }
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node)
        {
            return begin_QueryCarRecord(platte, flag, node, null, false, null, null);
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_QueryCarRecord(platte, flag, node, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_QueryCarRecord(platte, flag, node, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_QueryCarRecord(platte, flag, node, ctx__, true, cb__, cookie__);
        }

        private const string __QueryCarRecord_name = "QueryCarRecord";

        public bool end_QueryCarRecord(out ASSISTICE.CarTable[] records, out string error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __QueryCarRecord_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(38);
                records = new ASSISTICE.CarTable[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    records[ix__] = new ASSISTICE.CarTable();
                    records[ix__].read__(is__);
                }
            }
            error = is__.readString();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> begin_QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__QueryCarRecord_name);
            IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_QueryCarRecord> result__ =  new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_QueryCarRecord>(this, __QueryCarRecord_name, QueryCarRecord_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__QueryCarRecord_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(platte);
                os__.writeString(flag);
                if(node == null)
                {
                    ASSISTICE.TollNode tmp__ = new ASSISTICE.TollNode();
                    tmp__.write__(os__);
                }
                else
                {
                    node.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void QueryCarRecord_completed__(Ice.AsyncResult r__, ASSISTICE.Callback_ICarQuery_QueryCarRecord cb__, Ice.ExceptionCallback excb__)
        {
            ASSISTICE.CarTable[] records;
            string error;
            bool ret__;
            try
            {
                ret__ = end_QueryCarRecord(out records, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, records, error);
            }
        }

        public bool QueryCarRecord_async(ASSISTICE.AMI_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node)
        {
            Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> result__;
            try
            {
                checkTwowayOnly__(__QueryCarRecord_name);
                result__ = begin_QueryCarRecord(platte, flag, node);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_QueryCarRecord>(this, __QueryCarRecord_name, QueryCarRecord_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool QueryCarRecord_async(ASSISTICE.AMI_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryCarRecord> result__;
            try
            {
                checkTwowayOnly__(__QueryCarRecord_name);
                result__ = begin_QueryCarRecord(platte, flag, node, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_QueryCarRecord>(this, __QueryCarRecord_name, QueryCarRecord_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryStations> begin_QueryStations(int from, int count)
        {
            return begin_QueryStations(from, count, null, false, null, null);
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryStations> begin_QueryStations(int from, int count, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_QueryStations(from, count, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_QueryStations(int from, int count, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_QueryStations(from, count, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_QueryStations(int from, int count, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_QueryStations(from, count, ctx__, true, cb__, cookie__);
        }

        private const string __QueryStations_name = "QueryStations";

        public bool end_QueryStations(out ASSISTICE.Station[] lst, out string error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __QueryStations_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                lst = new ASSISTICE.Station[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    lst[ix__] = new ASSISTICE.Station();
                    lst[ix__].read__(is__);
                }
            }
            error = is__.readString();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_QueryStations> begin_QueryStations(int from, int count, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__QueryStations_name);
            IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_QueryStations> result__ =  new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_QueryStations>(this, __QueryStations_name, QueryStations_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__QueryStations_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(from);
                os__.writeInt(count);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void QueryStations_completed__(Ice.AsyncResult r__, ASSISTICE.Callback_ICarQuery_QueryStations cb__, Ice.ExceptionCallback excb__)
        {
            ASSISTICE.Station[] lst;
            string error;
            bool ret__;
            try
            {
                ret__ = end_QueryStations(out lst, out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, lst, error);
            }
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_UploadTollNode> begin_UploadTollNode(string flag, ASSISTICE.TollNode node)
        {
            return begin_UploadTollNode(flag, node, null, false, null, null);
        }

        public Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_UploadTollNode> begin_UploadTollNode(string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_UploadTollNode(flag, node, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_UploadTollNode(string flag, ASSISTICE.TollNode node, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UploadTollNode(flag, node, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_UploadTollNode(string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_UploadTollNode(flag, node, ctx__, true, cb__, cookie__);
        }

        private const string __UploadTollNode_name = "UploadTollNode";

        public bool end_UploadTollNode(out string error, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __UploadTollNode_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            error = is__.readString();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<ASSISTICE.Callback_ICarQuery_UploadTollNode> begin_UploadTollNode(string flag, ASSISTICE.TollNode node, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__UploadTollNode_name);
            IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_UploadTollNode> result__ =  new IceInternal.TwowayOutgoingAsync<ASSISTICE.Callback_ICarQuery_UploadTollNode>(this, __UploadTollNode_name, UploadTollNode_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__UploadTollNode_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(flag);
                if(node == null)
                {
                    ASSISTICE.TollNode tmp__ = new ASSISTICE.TollNode();
                    tmp__.write__(os__);
                }
                else
                {
                    node.write__(os__);
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void UploadTollNode_completed__(Ice.AsyncResult r__, ASSISTICE.Callback_ICarQuery_UploadTollNode cb__, Ice.ExceptionCallback excb__)
        {
            string error;
            bool ret__;
            try
            {
                ret__ = end_UploadTollNode(out error, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, error);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ICarQueryPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ICarQueryPrx r = b as ICarQueryPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ICarQueryPrxHelper h = new ICarQueryPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ICarQueryPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ICarQueryPrx r = b as ICarQueryPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ICarQueryPrxHelper h = new ICarQueryPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ICarQueryPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ICarQueryPrxHelper h = new ICarQueryPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ICarQueryPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ICarQueryPrxHelper h = new ICarQueryPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ICarQueryPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ICarQueryPrx r = b as ICarQueryPrx;
            if(r == null)
            {
                ICarQueryPrxHelper h = new ICarQueryPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ICarQueryPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ICarQueryPrxHelper h = new ICarQueryPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::ASSISTICE::ICarQuery",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ICarQueryDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ICarQueryDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, ICarQueryPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ICarQueryPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ICarQueryPrxHelper result = new ICarQueryPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace ASSISTICE
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface ICarQueryDel_ : Ice.ObjectDel_
    {
        bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, _System.Collections.Generic.Dictionary<string, string> context__);

        bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace ASSISTICE
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ICarQueryDelM_ : Ice.ObjectDelM_, ICarQueryDel_
    {
        public bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("BatchQuery", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(querys == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(querys.Length);
                        for(int ix__ = 0; ix__ < querys.Length; ++ix__)
                        {
                            (querys[ix__] == null ? new ASSISTICE.BatchQueryParams() : querys[ix__]).write__(os__);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    error = is__.readString();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("BatchUpload", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(records == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(records.Length);
                        for(int ix__ = 0; ix__ < records.Length; ++ix__)
                        {
                            (records[ix__] == null ? new ASSISTICE.CustomRecord() : records[ix__]).write__(os__);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    error = is__.readString();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("QueryCarRecord", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(platte);
                    os__.writeString(flag);
                    if(node == null)
                    {
                        ASSISTICE.TollNode tmp__ = new ASSISTICE.TollNode();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        node.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    {
                        int szx__ = is__.readAndCheckSeqSize(38);
                        records = new ASSISTICE.CarTable[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            records[ix__] = new ASSISTICE.CarTable();
                            records[ix__].read__(is__);
                        }
                    }
                    error = is__.readString();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("QueryStations", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(from);
                    os__.writeInt(count);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    {
                        int szx__ = is__.readAndCheckSeqSize(4);
                        lst = new ASSISTICE.Station[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            lst[ix__] = new ASSISTICE.Station();
                            lst[ix__].read__(is__);
                        }
                    }
                    error = is__.readString();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("UploadTollNode", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(flag);
                    if(node == null)
                    {
                        ASSISTICE.TollNode tmp__ = new ASSISTICE.TollNode();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        node.write__(os__);
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    error = is__.readString();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace ASSISTICE
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class ICarQueryDelD_ : Ice.ObjectDelD_, ICarQueryDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "BatchQuery", Ice.OperationMode.Normal, context__);
            string errorHolder__ = null;
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ICarQuery servant__ = null;
                try
                {
                    servant__ = (ICarQuery)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.BatchQuery(querys, out errorHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            error = errorHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "BatchUpload", Ice.OperationMode.Normal, context__);
            string errorHolder__ = null;
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ICarQuery servant__ = null;
                try
                {
                    servant__ = (ICarQuery)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.BatchUpload(records, out errorHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            error = errorHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool QueryCarRecord(string platte, string flag, ASSISTICE.TollNode node, out ASSISTICE.CarTable[] records, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "QueryStations", Ice.OperationMode.Normal, context__);
            ASSISTICE.Station[] lstHolder__ = null;
            string errorHolder__ = null;
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ICarQuery servant__ = null;
                try
                {
                    servant__ = (ICarQuery)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.QueryStations(from, count, out lstHolder__, out errorHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            lst = lstHolder__;
            error = errorHolder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "UploadTollNode", Ice.OperationMode.Normal, context__);
            string errorHolder__ = null;
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                ICarQuery servant__ = null;
                try
                {
                    servant__ = (ICarQuery)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.UploadTollNode(flag, node, out errorHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            error = errorHolder__;
            return result__;
        }
    }
}

namespace ASSISTICE
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class ICarQueryDisp_ : Ice.ObjectImpl, ICarQuery
    {
        #region Slice operations

        public void QueryCarRecord_async(ASSISTICE.AMD_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node)
        {
            QueryCarRecord_async(cb__, platte, flag, node, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void QueryCarRecord_async(ASSISTICE.AMD_ICarQuery_QueryCarRecord cb__, string platte, string flag, ASSISTICE.TollNode node, Ice.Current current__);

        public bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error)
        {
            return BatchQuery(querys, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool BatchQuery(ASSISTICE.BatchQueryParams[] querys, out string error, Ice.Current current__);

        public bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error)
        {
            return BatchUpload(records, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool BatchUpload(ASSISTICE.CustomRecord[] records, out string error, Ice.Current current__);

        public bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error)
        {
            return QueryStations(from, count, out lst, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool QueryStations(int from, int count, out ASSISTICE.Station[] lst, out string error, Ice.Current current__);

        public bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error)
        {
            return UploadTollNode(flag, node, out error, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool UploadTollNode(string flag, ASSISTICE.TollNode node, out string error, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::ASSISTICE::ICarQuery",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus QueryCarRecord___(ICarQuery obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string platte;
            platte = is__.readString();
            string flag;
            flag = is__.readString();
            ASSISTICE.TollNode node;
            node = null;
            if(node == null)
            {
                node = new ASSISTICE.TollNode();
            }
            node.read__(is__);
            is__.endReadEncaps();
            AMD_ICarQuery_QueryCarRecord cb__ = new _AMD_ICarQuery_QueryCarRecord(inS__);
            try
            {
                obj__.QueryCarRecord_async(cb__, platte, flag, node, current__);
            }
            catch(_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus BatchQuery___(ICarQuery obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            ASSISTICE.BatchQueryParams[] querys;
            {
                int szx__ = is__.readAndCheckSeqSize(8);
                querys = new ASSISTICE.BatchQueryParams[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    querys[ix__] = new ASSISTICE.BatchQueryParams();
                    querys[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            string error;
            IceInternal.BasicStream os__ = inS__.ostr();
            bool ret__ = obj__.BatchQuery(querys, out error, current__);
            os__.writeString(error);
            os__.writeBool(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus BatchUpload___(ICarQuery obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            ASSISTICE.CustomRecord[] records;
            {
                int szx__ = is__.readAndCheckSeqSize(27);
                records = new ASSISTICE.CustomRecord[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    records[ix__] = new ASSISTICE.CustomRecord();
                    records[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            string error;
            IceInternal.BasicStream os__ = inS__.ostr();
            bool ret__ = obj__.BatchUpload(records, out error, current__);
            os__.writeString(error);
            os__.writeBool(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus QueryStations___(ICarQuery obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int from;
            from = is__.readInt();
            int count;
            count = is__.readInt();
            is__.endReadEncaps();
            ASSISTICE.Station[] lst;
            string error;
            IceInternal.BasicStream os__ = inS__.ostr();
            bool ret__ = obj__.QueryStations(from, count, out lst, out error, current__);
            if(lst == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(lst.Length);
                for(int ix__ = 0; ix__ < lst.Length; ++ix__)
                {
                    (lst[ix__] == null ? new ASSISTICE.Station() : lst[ix__]).write__(os__);
                }
            }
            os__.writeString(error);
            os__.writeBool(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus UploadTollNode___(ICarQuery obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string flag;
            flag = is__.readString();
            ASSISTICE.TollNode node;
            node = null;
            if(node == null)
            {
                node = new ASSISTICE.TollNode();
            }
            node.read__(is__);
            is__.endReadEncaps();
            string error;
            IceInternal.BasicStream os__ = inS__.ostr();
            bool ret__ = obj__.UploadTollNode(flag, node, out error, current__);
            os__.writeString(error);
            os__.writeBool(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "BatchQuery",
            "BatchUpload",
            "QueryCarRecord",
            "QueryStations",
            "UploadTollNode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return BatchQuery___(this, inS__, current__);
                }
                case 1:
                {
                    return BatchUpload___(this, inS__, current__);
                }
                case 2:
                {
                    return QueryCarRecord___(this, inS__, current__);
                }
                case 3:
                {
                    return QueryStations___(this, inS__, current__);
                }
                case 4:
                {
                    return UploadTollNode___(this, inS__, current__);
                }
                case 5:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 6:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 7:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 8:
                {
                    return ice_ping___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type ASSISTICE::ICarQuery was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type ASSISTICE::ICarQuery was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}

namespace ASSISTICE
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class AMI_ICarQuery_QueryCarRecord : Ice.AMICallbackBase
    {
        public abstract void ice_response(bool ret__, ASSISTICE.CarTable[] records, string error);

        public void response__(bool ret__, ASSISTICE.CarTable[] records, string error)
        {
            ice_response(ret__, records, error);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface AMD_ICarQuery_QueryCarRecord : Ice.AMDCallback
    {
        void ice_response(bool ret__, ASSISTICE.CarTable[] records, string error);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    class _AMD_ICarQuery_QueryCarRecord : IceInternal.IncomingAsync, AMD_ICarQuery_QueryCarRecord
    {
        public _AMD_ICarQuery_QueryCarRecord(IceInternal.Incoming inc) : base(inc)
        {
        }

        public void ice_response(bool ret__, ASSISTICE.CarTable[] records, string error)
        {
            if(validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if(records == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(records.Length);
                        for(int ix__ = 0; ix__ < records.Length; ++ix__)
                        {
                            (records[ix__] == null ? new ASSISTICE.CarTable() : records[ix__]).write__(os__);
                        }
                    }
                    os__.writeString(error);
                    os__.writeBool(ret__);
                }
                catch(Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }
}
